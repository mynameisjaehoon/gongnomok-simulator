name: 백엔드 빌드-배포

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**
  pull_request:
    branches:
      - main
    paths: backend/**

env:
  ARTIFACT_NAME: 'gongnomok-api'
  ARTIFACT_DIRECTORY: './backend/gongnomok-api/build/libs'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

jobs:
  debug:
    name: 디버그
    runs-on: ubuntu-latest
    steps:
      - name: 환경변수 설정
        run: |
          echo "ARTIFACT_NAME is: ${{ env.ARTIFACT_NAME }}"
          echo "ARTIFACT_DIRECTORY is: ${{ env.ARTIFACT_DIRECTORY }}"
          echo "DATABASE_URL is set: ${{ env.DATABASE_URL != '' }}"
          echo "DATABASE_USERNAME is set: ${{ env.DATABASE_USERNAME != '' }}"
          echo "DATABASE_PASSWORD is set: ${{ env.DATABASE_PASSWORD != '' }}"

  build:  
    name: .jar 빌드 -> 아티팩트 업로드
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: JDK17 세팅
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
      
      - name: Gradle 세팅
        uses: gradle/actions/setup-gradle@v3

      - name: Gradle 빌드
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        run: |
          cd backend
          ./gradlew build
      
      - name: 아티팩트 파일 업로드
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_DIRECTORY }}/${{ env.ARTIFACT_NAME }}.jar

  docker-image:
    needs: build
    runs-on: ubuntu-latest
    name: 도커 이미지 생성, 푸시
    steps:
      - uses: actions/checkout@v4
      - name: 도커 로그인
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 도커 이미지 빌드
        run: |
          docker compose -f ./docker-compose.yml build

      - name: 도커 
        run: |
          docker compose -f ./docker-compose.yml push

  deploy:
    needs: [ build, docker-image ]
    name: 배포
    runs-on: ubuntu-latest
    steps:
      - name: SSH 접속 후 배포
        uses: appleboy/ssh-action@1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            cd gongnomok-simulator
            git pull
            sudo docker compose -f ./backend/docker/docker-compose.yml pull
            sudo docker compose -f ./backend/docker/docker-compose.yml down
            sudo docker compose -f ./backend/docker/docker-compose.yml up -d
